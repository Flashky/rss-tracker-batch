# This workflow will build a Java project with Maven and then create a Docker image from its Dockerfile.
# For more information see: 
# - https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
# - https://github.com/marketplace/actions/build-tag-publish-docker

name: Release version

on:
  release:
    types: [published]

jobs:
  
  # Obtains version from tag and verifies it is valid.
  # Allowed format is prefix "v" and alphanumeric characters.
  # Examples: v0.1.0, v0.1.0-alpha, v0.1.0-RELEASE
  verify-tag:
    runs-on: ubuntu-latest
    name: verify tag
    steps:
    
    # Setup
    - uses: actions/checkout@v2
    
    # Git tag name check
    - uses: olegtarasov/get-tag@v2.1.1
      id: version
      with:
        tagRegex: "^v([0-9]+.[0-9]+.[0-9]+[-]?\\w*)"  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
    - name: Abort release
      if: steps.version.outputs.tag == null
      run: | 
        echo "Tag name is invalid."
        echo "Expected: v([0-9]+.[0-9]+.[0-9]+[-]?\\w*)"
        echo "But found: ${GITHUB_REF##*/}"
        exit 1
        
  build:
    runs-on: ubuntu-latest
    needs: verify-tag
    steps:
    
    # Setup
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
   
    # Maven build
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Get jar filename
      run: echo "JAR_FILE=$(ls target/*.jar)" >> $GITHUB_ENV
      
    # Upload generated artifacts
    - name: Upload java artifact
      uses: actions/upload-artifact@v1
      with:
        name: java-artifact
        path:  ${{ env.JAR_FILE }}
        
  # Handles deployments of any artifacts to any needed registries
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    
    # Setup
    - uses: actions/checkout@v2
    - name: Download java artifact
      uses: actions/download-artifact@v2
      with:
        name: java-artifact
        path: target
    - name: Get release version
      run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF##*/v})" >> $GITHUB_ENV
    # Builds a docker image and pushes it to DockerHub.
    - name: Docker build & publish
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: flashk/${{ github.event.repository.name }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        tags: "latest,${{ env.RELEASE_VERSION }}"